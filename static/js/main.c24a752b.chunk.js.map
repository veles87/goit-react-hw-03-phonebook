{"version":3,"sources":["ContactForm/ContactForm.jsx","ContactList/ContactList.jsx","Filter/Filter.jsx","App.js","index.js","ContactForm/ContactForm.module.css"],"names":["ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contactForAdd","props","onSubmitData","reset","className","style","contactform","form","type","onSubmit","this","inputname","pattern","title","required","onChange","placeholder","btn","Component","ContactList","deleteId","Id","del","createList","contacts","map","contact","id","onClick","uuidv4","defaultProps","Filter","setFilterValue","toUpperCase","setFilterToState","App","filter","formSubmitHandler","data","repeatControl","cur","includes","arrayCont","alert","elementDelete","arr","idContact","elem","deleteContactFromContactList","newArrAfterDel","filterData","filterArr","fArr","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c24a752b.chunk.js","sourcesContent":["import style from './ContactForm.module.css';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  handleChange = event => {\n    /*     console.log(event.currentTarget);\n    console.log(event.currentTarget.name);\n    console.log(event.currentTarget.value); */\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n    //this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  /*   inputNameEvent = event => {\n    this.setState({ curName: event.currentTarget.value });\n  };\n  inputTelEvent = event => {\n    this.setState({ curTel: event.currentTarget.value });\n  }; */\n\n  handleSubmit = event => {\n    event.preventDefault();\n    let contactForAdd = { name: this.state.name, number: this.state.number };\n    //console.log(this.state);\n    this.props.onSubmitData(contactForAdd);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n  render() {\n    return (\n      \n      <div className={style.contactform}>\n        <form className={style.form} type=\"submit\" onSubmit={this.handleSubmit}>\n          <label>\n            Name  :\n            <input className={style.inputname} \n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              onChange={this.handleChange}\n              value={this.state.name}\n              placeholder=\"Add name\"\n            />\n          </label>\n          <label>\n            Number  :\n            <input className={style.inputname}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n              required\n              onChange={this.handleChange}\n              value={this.state.number}\n              placeholder=\"Add phone\"\n            />\n          </label>\n\n          <button className={style.btn} type=\"submit\">Add contact</button>\n        </form>\n      </div>\n    \n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmitData: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './ContactList.css';\n\n\nclass ContactList extends Component {\n  deleteId = Id => {\n    this.props.del(Id);\n  };\n  createList = () => {\n    return this.props.contacts.map(contact => {\n      return (\n        <li key={uuidv4()} id={contact.id}>\n          {`${contact.name}: ${contact.number}`}\n          <button  \n            data-id={contact.id}\n            onClick={() => this.deleteId(contact.id)}\n          >\n            Delete\n          </button>\n          \n        </li>\n        \n      );\n    });\n  };\n\n  render() {\n    return <ul>{this.createList()}</ul>;\n  }\n}\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  del: PropTypes.func.isRequired,\n};\nContactList.defaultProps = {\n  contacts: [],\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Filter.css\";\n\nclass Filter extends Component {\n  setFilterValue = event => {\n    let value = event.currentTarget.value.toUpperCase();\n    this.props.setFilterToState(value);\n  };\n\n  render() {\n    return (\n      <div>\n        <h4>Find contacts by name :</h4>\n        <input   onChange={this.setFilterValue}></input>\n        \n      </div>\n    );\n  }\n}\n\nFilter.propTypes = {\n  setFilterToState: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import React, { Component } from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    //console.log(\" component did mount\");\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    //console.log(parsedContacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //console.log(\"component did update\");\n    if (this.state.contacts !== prevState.contacts) {\n      //console.log(\"Контакти було оновлено\");\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  formSubmitHandler = (data) => {\n    this.repeatControl(data);\n  };\n\n  repeatControl = (data) => {\n    let nameArray = [];\n    nameArray = this.state.contacts.map((cur) => cur.name);\n    if (!nameArray.includes(data.name)) {\n      let arrayCont = [];\n      arrayCont = [\n        ...this.state.contacts,\n        { id: uuidv4(), name: data.name, number: data.number },\n      ];\n      return this.setState({ ...this.state, contacts: arrayCont });\n    } else {\n      alert(\" Контакт вже є у телефонній книзі!!!\");\n    }\n  };\n\n  elementDelete = (arr, idContact) => {\n    let newArr = arr.filter((elem) => elem.id !== idContact);\n    return newArr;\n  };\n\n  deleteContactFromContactList = (idContact) => {\n    let newArrAfterDel = this.elementDelete(this.state.contacts, idContact);\n    this.setState({\n      ...this.state,\n      contacts: [...newArrAfterDel],\n    });\n  };\n\n  setFilterToState = (filterData) => {\n    this.setState({ ...this.state, filter: `${filterData}` });\n  };\n\n  filterArr = (fArr) => {\n    let newArr = fArr.filter((cur) =>\n      cur.name.toUpperCase().includes(this.state.filter)\n    );\n    return newArr;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmitData={this.formSubmitHandler} />\n        <h1>Contacts</h1>\n        <Filter setFilterToState={this.setFilterToState} />\n        <ContactList\n          contacts={this.filterArr(this.state.contacts)}\n          del={this.deleteContactFromContactList}\n        />\n      </div>\n    );\n  }\n}\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./App.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__30sDI\",\"btn\":\"ContactForm_btn__jacYy\",\"inputname\":\"ContactForm_inputname__wesTT\"};"],"sourceRoot":""}